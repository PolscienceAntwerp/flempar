plen_comm = plen_comm,
fact = fact,
use_parallel = use_parallel,
raw = raw,
type = type
)
return(object)
}
# get details from "debates","oral_questions_and_interpellations","parliamentary_initiatives","committee_hearings"
if ("details" %in% type & any(facts_list %in% fact)) {
object <- get_plen_comm_details(
date_range_from = date_range_from,
date_range_to = date_range_to,
plen_comm = plen_comm,
fact = fact,
use_parallel = use_parallel,
raw = raw,
type = type,
extra_via_fact = extra_via_fact
)
return(object)
}
# get documents from "debates","oral_questions_and_interpellations","parliamentary_initiatives","committee_hearings"
if ("document" %in% type & any(facts_list %in% fact)) {
object <- get_plen_comm_documents(
date_range_from = date_range_from,
date_range_to = date_range_to,
plen_comm = plen_comm,
fact = fact,
use_parallel = use_parallel,
raw = raw,
type = type,
extra_via_fact = extra_via_fact
)
return(object)
}
}
#' Filter texts fields on certain search terms
#'
#' @param df Data frame
#' @param text_field Which textfield should be searched?
#' @param search_terms The search terms. Multiple terms are possible by adding them as a vector with c(). This is not case sensitive.
#' @export
#' @importFrom dplyr %>%
#' @examples
#' \dontrun{
#'
#' wq_document <- get_work(
#'   date_range_from = "2022-01-20",
#'   date_range_to = "2022-01-31",
#'   type = "document",
#'   fact = "written_questions",
#'   use_parallel = TRUE
#' )
#'
#' search_terms(wq_document, text_field = "text", search_terms = "PFOS")
#' }
search_terms <- function(df, text_field, search_terms = NULL) {
message("Scrubbing away all html-tags ")
df %>%
tibble::as_tibble() %>%
dplyr::rename(text_col = !!text_field) %>%
dplyr::mutate(text_col = gsub("\r", "", text_col)) %>%
dplyr::mutate(text_col = gsub("\n", "", text_col)) -> raw_text
for (i in seq_along(raw_text$text_col)) {
raw_text$text_col[[i]] <- xml2::xml_text(xml2::read_html(charToRaw(raw_text$text_col[[i]])))
}
raw_text %>%
dplyr::filter(stringr::str_detect(tolower(text_col), gsub(", ", "|", toString(tolower(search_terms))))) -> result
return(result)
}
#' Search all the MPs serving, or who served the Flemish parliament
#'
#' @param selection Select either "current", at a certain date "date" or "former".
#' @param date_at When selecting "date" in selection, provide the date, using the following format "yyyy-mm-dd".
#' @param fact Options of facts to return are 'raw', 'bio', 'education', 'career','political_info', 'presences_commissions' or 'presences_plenary'.
#' @param use_parallel Boolean: should parallel workers be used to call the API?
#' @export
#'
#' @examples
#' \dontrun{
#'
#' get_mp(use_parallel = TRUE, fact = "bio", date_at = "1998-01-01", selection = "date")
#' }
get_mp <- function(selection = "current", fact = "bio", date_at = NULL, use_parallel = TRUE) {
facts <- c("raw", "bio", "education", "career", "political_info", "presences_commissions", "presences_plenary")
if (length(selection) != 1) {
stop("You have selected multiple selection options. Please set selection to either 'current', 'all' or 'date'.")
}
if (length(fact) != 1) {
stop("You have selected multiple type options. Please set type to ", toString(tolower(facts)), ".")
}
if (any(!fact %in% facts)) {
stop("Not a valid type. Valid options are ", toString(tolower(facts)), ". Select one type.")
}
if (selection == "current") {
if (!is.null(date_at)) {
message("Selection is set to current, date_at will be ignored.")
date_at <- NULL
}
date_at_conv <- Sys.Date() %>% format("%d%m%Y")
robj <- call_api_once(
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv/op-datum",
query = list(datum = date_at_conv)
)
mainlist <- call_api_multiple_times(
iterator = robj$items$volksvertegenwoordiger$id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv",
query = list(lang = "nl"),
resultVector = NULL,
use_parallel = use_parallel
)
}
# DATE
if (selection == "date") {
if (is.null(date_at)) {
stop("You have selected date as selection criteria, but failed to provide a date. Please set date_at (yyyy-mm-dd).")
}
if (is.na(lubridate::ymd(date_at))) {
stop("Wrong Date Format, please use yyyy-mm-dd.")
}
date_at_conv <- lubridate::ymd(date_at) %>% format("%d%m%Y")
robj <- call_api_once(
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv/op-datum",
query = list(datum = date_at_conv)
)
mainlist <- call_api_multiple_times(
iterator = robj$items$volksvertegenwoordiger$id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv",
query = list(lang = "nl"),
resultVector = NULL,
use_parallel = use_parallel
)
}
# FORMER
if (selection == "former") {
if (!is.null(date_at)) {
message("Selection is set to former, date_at will be ignored")
date_at <- NULL
}
robj <- call_api_once(
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv/gewezen",
query = list()
)
mainlist <- call_api_multiple_times(
iterator = robj$items$volksvertegenwoordiger$id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv",
query = list(lang = "nl"),
resultVector = NULL,
use_parallel = use_parallel
)
}
fact <- tolower(fact)
if (fact == "raw") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) -> result
return(result)
}
if (fact == "bio") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
guarantee_field(c("domicillieadres","email","naam","geslacht","geboortedatum","geboorteplaats", "gsmnr", "website", "huidigefractie")) %>%
dplyr::select(id_mp = id, voornaam, achternaam = naam, geslacht, geboortedatum, geboorteplaats, gsmnr, email, website, huidigefractie) %>%
tidyr::unnest_wider(huidigefractie) %>%
dplyr::select(id_mp, voornaam, achternaam, geslacht, geboortedatum, geboorteplaats, gsmnr, email, website, party_id = id, party_naam = naam) %>%
dplyr::mutate(geboortedatum = lubridate::date(lubridate::ymd_hms(geboortedatum))) %>%
guarantee_field(c("domicillieadres")) %>%
tidyr::unnest_wider(domicillieadres, names_sep = "_") %>%
guarantee_field(c("domicillieadres_deelgemeente", "domicillieadres_nr", "domicillieadres_straat", "domicillieadres_telnr")) %>%
tidyr::unnest_wider(domicillieadres_deelgemeente, names_sep = "_") %>%
guarantee_field(c("domicillieadres_deelgemeente_naam", "domicillieadres_deelgemeente_postnr")) %>%
dplyr::select(id_mp, voornaam, achternaam, geslacht, geboortedatum, geboorteplaats, gsmnr, email, website, party_id, party_naam ) %>%
tidyr::unnest_wider(email, names_sep = "_") %>%
tidyr::unnest(website, names_sep = "_", keep_empty = TRUE) %>%
guarantee_field(c("website_soort", "website_value")) %>%
tidyr::pivot_wider(names_from = website_soort, values_from = website_value) %>%
dplyr::select(-`NA`) -> result
return(result)
}
if (fact == "education") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
guarantee_field(c("opleiding")) %>%
dplyr::select(id_mp = id, voornaam, naam, opleiding) %>%
tidyr::unnest(opleiding, keep_empty = TRUE) -> result
return(result)
}
if (fact == "career") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
guarantee_field(c("beroep")) %>%
dplyr::select(id_mp = id, voornaam, naam, beroep) %>%
tidyr::unnest(beroep, keep_empty = TRUE) %>%
guarantee_field(c("datumvanformaat", "datumtotformaat")) %>%
dplyr::select(-datumtotformaat, -datumvanformaat) %>%
dplyr::select(id_mp, voornaam, naam, datumvan, datumtot, titel, werkgever) -> result
return(result)
}
if (fact == "presences_commissions") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
dplyr::select(id_mp = id, voornaam, naam, aanwezigheden = `aanwezigheden-huidige-legislatuur`) %>%
tidyr::unnest_longer(aanwezigheden) %>%
dplyr::filter(aanwezigheden_id == "commissie-aanw") %>%
tidyr::unnest_wider(aanwezigheden) %>%
tidyr::unnest(c(commissie, `vast-lid-aanwezigheid`, `plaatsvervangend-lid-aanwezigheid`), names_sep = "_", keep_empty = TRUE) -> result
return(result)
}
if (fact == "presences_plenary") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
dplyr::select(id_mp = id, voornaam, naam, aanwezigheden = `aanwezigheden-huidige-legislatuur`) %>%
tidyr::unnest_longer(aanwezigheden) %>%
dplyr::filter(aanwezigheden_id == "plenaire-aanw") %>%
tidyr::unnest_wider(aanwezigheden) -> result
return(result)
}
if (fact == "political_info") {
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
guarantee_field(c("interesse")) %>%
dplyr::select(
id_mp = id,
voornaam, naam,
huidigefractie,
mandaat_vl = `mandaat-vlaams-parlement`,
mandaat_andere = `mandaat-andere`,
kieskring,
deelstaatsenator,
lidmaatschap,
interesse
) %>%
tidyr::unnest_wider(lidmaatschap, names_sep = "_") %>%
tidyr::unnest(c(`lidmaatschap_datumVan`, `lidmaatschap_fractie`, `lidmaatschap_datumTot`), names_sep = "_", keep_empty = TRUE) %>%
dplyr::mutate(lidmaatschap_datumVan = lubridate::date(lidmaatschap_datumVan)) %>%
tidyr::unnest_wider(huidigefractie, names_sep = "_") %>%
tidyr::unnest_wider(interesse, names_sep = "_") %>%
guarantee_field(c("interesse_volgorde", "interesse_interesse")) %>%
dplyr::select(-interesse_volgorde, -lidmaatschap_datumTot) %>%
tidyr::unnest_wider(interesse_interesse, names_sep = "_") %>%
dplyr::select(-huidigefractie_kleur, -huidigefractie_logo, -lidmaatschap_fractie_id, -lidmaatschap_fractie_kleur, -lidmaatschap_fractie_logo, -lidmaatschap_fractie_naam, -`lidmaatschap_fractie_zetel-aantal`) %>%
dplyr::rename(party_id = huidigefractie_id, party_name = huidigefractie_naam, party_seats = `huidigefractie_zetel-aantal`) -> result
return(result)
}
}
# Get the bio information of the current MPs
mp_bio <- get_mp(selection="current",fact="bio",use_parallel=TRUE)
View(mp_bio)
work_b <- get_work(date_range_from="2024-01-01"
, date_range_to="2024-08-31")
library(dplyr)
# Get all the written questions between "2022-01-20" and "2022-01-31" in a dataframe
wq_documents <- get_work(date_range_from="2024-01-20",
date_range_to="2024-01-31",
type="document",
fact="written_questions"
)
# Get all the basic data on these written questions
wq_basicdata <- get_work(date_range_from="2024-01-20",
date_range_to="2024-01-31",
type="details",
fact="written_questions"
)
# Get the bio information of the current MPs
mp_bio <- get_mp(selection="current",fact="bio",use_parallel=TRUE)
# How to run from the command line: Rscript download_written_questions.R
# Uncomment these lines before execution if you don't have them installed yet
#require(devtools)
#install_github("PolscienceAntwerp/flempar")
#install.packages("dplyr")
library(flempar)
library(dplyr)
# Get all the written questions between "2024-01-01" and "2024-06-30" in a dataframe
wq_documents <- get_work(date_range_from="2019-01-01",
date_range_to="2019-06-30",
type="document",
fact="written_questions"
)
# How to run from the command line: Rscript download_written_questions.R
# Uncomment these lines before execution if you don't have them installed yet
#require(devtools)
#install_github("PolscienceAntwerp/flempar")
#install.packages("dplyr")
library(flempar)
library(dplyr)
# Get all the written questions between "2024-01-01" and "2024-06-30" in a dataframe
wq_documents <- get_work(date_range_from="2020-01-01",
date_range_to="2020-06-30",
type="document",
fact="written_questions"
)
# Get all the written questions between "2024-01-01" and "2024-06-30" in a dataframe
wq_documents <- get_work(date_range_from="2024-01-01",
date_range_to="2024-06-30",
type="document",
fact="written_questions"
)
list(page = 1, max = 100, sort = "date")
paste0("inmeta:publicatiedatum:daterange:", "2024-01-01", "..", "2024-06-30", "&requiredfields=aggregaattype:", "Schriftelijke vraag")
library(httr)
library(jsonlite)
# Base URL
base_url <- "https://ws.vlpar.be/api/search/query"
# Construct the full URL
full_url <- paste0(
base_url, "/",
"inmeta:publicatiedatum:daterange:",
"2024-01-01..2024-06-30",
"&requiredfields=aggregaattype:",
"Schriftelijke%20vraag"
)
# Query parameters
query_params <- list(
page = 1,
max = 100,
sort = "date"
)
# Make the API request
response <- GET(full_url, query = query_params)
# Check the response status
if (status_code(response) != 200) {
stop("Failed to retrieve data. HTTP status code: ", status_code(response))
}
# Parse the response
data <- content(response, as = "parsed", type = "application/json")
# Use the httr package to make the request
library(httr)
# Construct the URL as before
base_url <- "https://ws.vlpar.be/api/search/query"
type_encoded <- URLencode("Schriftelijke vraag")
path <- paste0(
"inmeta:publicatiedatum:daterange:",
"2024-01-01..2024-06-30",
"&requiredfields=aggregaattype:",
type_encoded
)
full_url <- paste0(base_url, "/", path)
# Query parameters
query_params <- list(
page = 1,
max = 100,
sort = "date"
)
# Make the GET request
response <- GET(full_url, query = query_params)
# Check the status code
status_code <- status_code(response)
print(paste("HTTP Status Code:", status_code))
# Check the status code
status_code <- status_code(response)
print(paste("HTTP Status Code:", status_code))
# Get the content type
content_type <- headers(response)$`content-type`
print(paste("Content-Type:", content_type))
# Get the raw content
raw_content <- content(response, as = "text", encoding = "UTF-8")
print(raw_content)
print(paste("Content-Type:", content_type))
# Construct the URL as before
base_url <- "https://ws.vlpar.be/api/search/query"
type_encoded <- URLencode("Schriftelijke vraag")
path <- paste0(
"inmeta:publicatiedatum:daterange:",
"2024-01-01..2024-06-30",
"&requiredfields=aggregaattype:",
type_encoded
)
full_url <- paste0(base_url, "/", path)
# Query parameters
query_params <- list(
page = 1,
max = 100,
sort = "date"
)
# Add the 'Accept: application/json' header
response <- GET(full_url, query = query_params, add_headers(Accept = "application/json"))
# Check if the content type is now JSON
content_type <- headers(response)$`content-type`
print(paste("Content-Type:", content_type))
# Check the response status
if (status_code(response) != 200) {
stop("Failed to retrieve data. HTTP status code: ", status_code(response))
}
# Parse the response
data <- content(response, as = "parsed", type = "application/json")
# Parse the response
data <- content(response, as = "parsed", type = "application/json")
# Extract results
results <- data$result
# Initialize a vector to store 'publicatiedatum' values
publicatiedatum_values <- c()
# Loop through the results and extract 'publicatiedatum'
for (item in results) {
metatags <- item$metatags
# Find the metatag with name 'publicatiedatum'
pub_date <- sapply(metatags, function(tag) {
if (tag$name == "publicatiedatum") {
return(tag$value)
} else {
return(NULL)
}
})
# Append to the vector
publicatiedatum_values <- c(publicatiedatum_values, unlist(pub_date))
}
# Initialize a vector to store 'publicatiedatum' values
publicatiedatum_values <- c()
# Loop through the results and extract 'publicatiedatum'
for (item in results) {
metatags <- item$metatags
# Find the metatag with name 'publicatiedatum'
pub_date <- sapply(metatags, function(tag) {
if (tag$name == "publicatiedatum") {
return(tag$value)
} else {
return(NULL)
}
})
# Append to the vector
publicatiedatum_values <- c(publicatiedatum_values, unlist(pub_date))
}
# After receiving the response
content_type <- headers(response)$`content-type`
print(paste("Content-Type:", content_type))
setwd("~/RProjects/flempar")
install_github("PolscienceAntwerp/flempar")
require(devtools)
install_github("PolscienceAntwerp/flempar")
install_github("PolscienceAntwerp/flempar" force=TRUE)
install_github("PolscienceAntwerp/flempar", force=TRUE)
library(flempar)
library(dplyr)
# Get all the written questions between "2024-01-01" and "2024-06-30" in a dataframe
wq_documents <- get_work(date_range_from="2024-01-01",
date_range_to="2024-06-30",
type="document",
fact="written_questions"
)
date_range_from<-"2024-01-01"
date_range_to<-"2024-06-30"
type<-"document"
fact<-"written_questions"
library(flempar)
library(dplyr)
# Get all the written questions between "2024-01-01" and "2024-06-30" in a dataframe
wq_documents <- get_work(date_range_from="2024-01-01",
date_range_to="2024-06-30",
type="document",
fact="written_questions"
)
date_range_from<-"2024-01-01"
date_range_to<-"2024-06-30"
type<-"document"
fact<-"written_questions"
use_parallel <- TRUE
two_columns_pdf <- FALSE
if (any(is.na(c(lubridate::ymd(date_range_from), lubridate::ymd(date_range_to))))) {
stop("Wrong Date Format, please use yyyy-mm-dd.")
}
type <- gsub(" ", "%20", type)
list <- vector("list", length = length(type))
for (i in seq_along(type)) {
print(i)
}
URL <- "https://ws.vlpar.be/api/search/query"
path <- paste0("inmeta:publicatiedatum:daterange:", date_range_from, "..", date_range_to, "&requiredfields=aggregaattype:", type[[i]])
query < list(page = 1, max = 100, sort = "date")
query <- list(page = 1, max = 100, sort = "date")
remove_trailing_and_leading_slashes <- function(input_string) {
# Remove leading slashes
input_string <- sub("^/*", "", input_string)
# Remove trailing slashes
input_string <- sub("/*$", "", input_string)
return(input_string)
}
URL <- remove_trailing_and_leading_slashes(URL)
path <- remove_trailing_and_leading_slashes(path)
httr::GET(
file.path(URL, path, ...),
query = query,
httr::accept_json()
)
httr::GET(
file.path(URL, path, ...),
query = query,
httr::accept_json()
)
response <- httr::GET(
file.path(URL, path, ...),
query = query,
httr::accept_json()
)
print(path)
response <- httr::GET(
file.path(URL, path),
query = query,
httr::accept_json()
)
print(file.path(URL, path))
