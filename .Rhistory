dplyr::left_join(type_conv,by=c("type_activiteit"="type_nl"))%>%
dplyr::filter(type_eng%in%fact) %>%
dplyr::distinct() %>%
dplyr::rename(naam_document=naam) %>%
dplyr::filter(!is.na(document)) %>%
dplyr::left_join(list %>%
tibble::tibble(result = ., id_fact = names(list)) %>%
tidyr::unnest_wider(result,names_sep="_") %>%
tidyr::unnest_wider(result_thema,names_sep="_")   %>%
tidyr::unnest_wider(result_procedureverloop,names_sep = "_") %>%
tidyr::unnest(cols = c(result_procedureverloop_vergadering),keep_empty = TRUE) %>%
dplyr::select(id_fact
,id_verg = id
,datumbegin
,datumeinde
,omschrijving
,result_titel
,result_onderwerp
,dplyr::starts_with("result_thema")
,result_zittingsjaar
,result_status
,result_objecttype
,result_contacttype
,`result_parlementair-initiatief`
,base_initiatives= `result_basis-initiatieven`) %>%
dplyr::filter(!is.na(id_verg)) %>%
tidyr::hoist(result_contacttype,
naam = list("contact", 1, "naam"),
voornaam = list("contact", 1, "voornaam"),
role= list( "beschrijving"),
id_mp = list("contact", 1, "id")) %>%
dplyr::distinct() %>%
dplyr::mutate(id_verg=as.character(id_verg),
id_fact = as.integer(id_fact)), by=c("id_fact"="id_fact","id_verg"="id_verg")) -> result
return(result)
}
# if(fact=="verzoekschriften"){
#
#   result %>%
#     tibble::tibble(result = ., id_fact = names(result)) %>%
#     tidyr::unnest_wider(result,names_sep="_") %>%
#     tidyr::unnest_wider(result_thema,names_sep="_") %>%
#
#     dplyr::select(id_fact
#                   ,result_titel
#                   ,result_onderwerp
#                   ,dplyr::starts_with("result_thema")
#                   ,result_zittingsjaar
#                   ,result_status
#                   ,result_objecttype
#                   ,result_contacttype
#                   ,`result_parlementair-initiatief`
#                   ,result_samenhang
#                   ,result_procedureverloop   ) %>%
#     tidyr::hoist(result_contacttype,
#                  naam = list("contact", 1, "naam"),
#                  voornaam = list("contact", 1, "voornaam"),
#                  role= list( "beschrijving"),
#                  id_mp = list("contact", 1, "id")) -> result
#
#   return(result)
#
# }
}
#' Get the documents discussed in plenary or commission sessions
#'
#' @param date_range_from The start date, should be in format "yyyy-mm-dd".
#' @param date_range_to The end date, should be in format "yyyy-mm-dd".
#' @param fact The fact to search.
#' @param type Type of data to be returned, options include "document", "speech" or "details".
#' @param plen_comm Switch to pick between plenary (plen) and commission (comm) sessions.
#' @param use_parallel Boolean: should parallel workers be used to call the API?
#' @param raw Boolean: should the raw object be returned?
#' @param extra_via_fact Boolean: also search the underlying endpoint for linked documents? This may return documents not linked to the specific meeting, thus may also include meetings on dates before/after the date range.
#' @importFrom dplyr %>%
get_plen_comm_documents <- function(date_range_from,date_range_to,fact,plen_comm="plen",type="details",use_parallel=TRUE,raw=FALSE,extra_via_fact=FALSE){
session_object <- get_sessions_details(date_range_from=date_range_from
,date_range_to=date_range_to
,use_parallel=use_parallel
,plen_comm=plen_comm
,type=type
,extra_via_fact=extra_via_fact)
session_object %>%
dplyr::left_join(type_conv,by=c("type_activiteit"="type_nl")) %>%
dplyr::filter(type_eng%in%fact) %>%
dplyr::filter(!is.na(document)) %>%
dplyr::mutate(id = stringr::str_extract(document,"[0-9]+")) %>%
dplyr::select(id_verg,id_fact,id,document ) %>%
dplyr::distinct() -> mainlist
if(length(mainlist$document)==0){
stop("No facts found. Usually this means the type of fact you are looking for did not occur during the specified time or that the specified output is not present.")
}
message("Getting and parsing the documents." )
list <- parse_documents(mainlist=mainlist,use_parallel=use_parallel)
tibble::tibble(list=list ) %>%
tidyr::unnest(list,keep_empty = TRUE) -> result
return(result)
}
#' Get data from the Flemish parliament
#'
#' @param date_range_from The start date, should be in format "yyyy-mm-dd".
#' @param date_range_to The end date, should be in format "yyyy-mm-dd".
#' @param fact Which fact should be returned, options include "written_questions", "debates", "oral_questions_and_interpellations", "parliamentary_initiatives" or "committee_hearings"
#' @param type Type of data to be returned, options include "document", "speech" or "details".
#' @param plen_comm Switch to pick between plenary (plen) and commission (comm) sessions.
#' @param use_parallel Boolean: should parallel workers be used to call the API?
#' @param raw Boolean: should the raw object be returned?
#' @param extra_via_fact Boolean: also search the underlying endpoint for linked documents? This may return documents not linked to the specific meeting, thus may also include meetings on dates before/after the date range.
#' @param two_columns_pdf Boolean: Use when you encounter two-colummned PDFs.
#' @export
#' @importFrom dplyr %>%
#' @examples
#'
#' \dontrun{
#'
#'  get_work(date_range_from="2022-01-20",
#'              date_range_to="2022-01-31",
#'              type="document",
#'              fact="written_questions",
#'              use_parallel=TRUE )
#'
#' }
get_work <- function(date_range_from, date_range_to, fact="debates", type="details",plen_comm="plen",use_parallel=TRUE,raw=FALSE, extra_via_fact=FALSE,two_columns_pdf=FALSE){
# Check input -------------------------------------------------------------
type_list <- c("document","speech","details")
facts_list <- c("written_questions","debates","oral_questions_and_interpellations","parliamentary_initiatives","committee_hearings")
#types
if(!any(type_list %in%type)){
stop(paste0("Supply valid type. Valid options are ",toString(tolower(type_list)),". Select one type."))
}
if(length(type)!=1){
stop("You have selected multiple type options. Please set type to ", toString(tolower(facts)),".")
}
#facts
if(!any(facts_list %in%fact)){
stop(paste0("Supply valid type. Valid options are ",toString(tolower(facts_list)),". Select one type."))
}
if(length(fact)!=1){
stop("You have selected multiple type options. Please set type to ", toString(tolower(facts_list)),".")
}
if("plen"%in%plen_comm & "committee_hearings"%in%fact){
stop("You have selected an incompatible combination (Council hearings are not held in plenary sessions).")
}
if("comm"%in%plen_comm & "debates"%in%fact){
stop("You have selected an incompatible combination (Debates are not held in plenary sessions).")
}
if("oral_questions_and_interpellations"%in%fact & type=="document" ){
stop("You have selected an incompatible combination (Documents are not associated with oral questions and interpellations).")
}
# Getting data ------------------------------------------------------------
# written questions
if("document"%in%type & "written_questions"%in%fact){
object <- get_written_questions_documents(date_range_from=date_range_from
,date_range_to=date_range_to
,use_parallel=use_parallel
,two_columns_pdf=two_columns_pdf)
object %>%
dplyr::select(id_fact,publicatiedatum,text) %>%
as.data.frame -> result
return(result)
}
# written questions
if("details"%in%type & "written_questions"%in%fact){
object <-  get_written_questions_details(date_range_from=date_range_from
,date_range_to=date_range_to
,use_parallel=use_parallel
,raw=raw)
return(object)
}
# get speech from "debates","oral_questions_and_interpellations","parliamentary_initiatives","committee_hearings"
if("speech"%in%type & any(facts_list%in%fact)){
object <-  get_plen_comm_speech(date_range_from=date_range_from
,date_range_to=date_range_to
,plen_comm=plen_comm
,fact=fact
,use_parallel=use_parallel
,raw=raw
,type=type)
return(object)
}
# get details from "debates","oral_questions_and_interpellations","parliamentary_initiatives","committee_hearings"
if("details"%in%type & any(facts_list%in%fact)){
object <-  get_plen_comm_details(date_range_from=date_range_from
,date_range_to=date_range_to
,plen_comm=plen_comm
,fact=fact
,use_parallel=use_parallel
,raw=raw
,type=type
,extra_via_fact=extra_via_fact)
return(object)
}
# get documents from "debates","oral_questions_and_interpellations","parliamentary_initiatives","committee_hearings"
if("document"%in%type & any(facts_list%in%fact)){
object <-  get_plen_comm_documents(date_range_from=date_range_from
,date_range_to=date_range_to
,plen_comm=plen_comm
,fact=fact
,use_parallel=use_parallel
,raw=raw
,type=type
,extra_via_fact=extra_via_fact)
return(object)
}
}
#' Filter texts fields on certain search terms
#'
#' @param df Data frame
#' @param text_field Which textfield should be searched?
#' @param search_terms The search terms. Multiple terms are possible by adding them as a vector with c(). This is not case sensitive.
#' @export
#' @importFrom dplyr %>%
#' @examples
#'
#' \dontrun{
#'
#' wq_document <- get_work(date_range_from="2022-01-20",
#'                            date_range_to="2022-01-31",
#'                            type="document",
#'                            fact="written_questions",
#'                            use_parallel=TRUE )
#'
#' search_terms(wq_document, text_field = "text", search_terms = "PFOS")
#'
#' }
search_terms <- function(df,text_field,search_terms=NULL){
message("Scrubbing away all html-tags ")
df %>%
tibble::as_tibble() %>%
dplyr::rename(text_col=!!text_field) %>%
dplyr::mutate(text_col = gsub("\r", "", text_col)) %>%
dplyr::mutate(text_col = gsub("\n", "", text_col)) -> raw_text
for(i in seq_along(raw_text$text_col)){
raw_text$text_col[[i]] <- xml2::xml_text(xml2::read_html(charToRaw(raw_text$text_col[[i]])))
}
raw_text %>%
dplyr::filter(stringr::str_detect(tolower(text_col), gsub(", ","|",toString(tolower(search_terms))) )) -> result
return(result)
}
#' Search all the MPs serving, or who served the Flemish parliament
#'
#' @param selection Select either "current", at a certain date "date" or "former".
#' @param date_at When selecting "date" in selection, provide the date, using the following format "yyyy-mm-dd".
#' @param fact Options of facts to return are 'raw', 'bio', 'education', 'career','political_info', 'presences_commissions' or 'presences_plenary'.
#' @param use_parallel Boolean: should parallel workers be used to call the API?
#' @export
#'
#' @examples
#' \dontrun{
#'
#'  get_mp(use_parallel=TRUE,fact="bio",date_at="1998-01-01",selection="date")
#'
#' }
get_mp <- function(selection="current",fact="bio", date_at=NULL, use_parallel=TRUE){
# warnings ----------------------------------------------------------------
facts <- c('raw', 'bio', 'education', 'career','political_info', 'presences_commissions', 'presences_plenary')
if(length(selection)!=1){
stop("You have selected multiple selection options. Please set selection to either 'current', 'all' or 'date'.")
}
if(length(fact)!=1){
stop("You have selected multiple type options. Please set type to ", toString(tolower(facts)),".")
}
if(any(!fact %in% facts ) ){
stop("Not a valid type. Valid options are ", toString(tolower(facts)),". Select one type." )
}
# getting the data --------------------------------------------------------
# CURRENT
if(selection=="current"){
if(!is.null(date_at)){
message("Selection is set to current, date_at will be ignored.")
date_at=NULL
}
date_at_conv <- Sys.Date() %>% format('%d%m%Y')
robj <- call_api_once(URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv/op-datum",
query = list(datum=date_at_conv))
mainlist <- call_api_multiple_times(iterator=robj$items$volksvertegenwoordiger$id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv",
query = list(lang="nl"),
resultVector=NULL,
use_parallel=use_parallel)
}
# DATE
if(selection=="date"){
if(is.null(date_at)){
stop("You have selected date as selection criteria, but failed to provide a date. Please set date_at (yyyy-mm-dd).")
}
if(is.na(lubridate::ymd(date_at))){
stop("Wrong Date Format, please use yyyy-mm-dd.")
}
date_at_conv <- lubridate::ymd(date_at) %>% format('%d%m%Y')
robj <- call_api_once(URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv/op-datum",
query = list(datum=date_at_conv))
mainlist <- call_api_multiple_times(iterator=robj$items$volksvertegenwoordiger$id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv",
query = list(lang="nl"),
resultVector=NULL,
use_parallel=use_parallel)
}
# FORMER
if(selection=="former"){
if(!is.null(date_at)){
message("Selection is set to former, date_at will be ignored")
date_at=NULL
}
robj <- call_api_once(URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv/gewezen",
query = list())
mainlist <- call_api_multiple_times(iterator=robj$items$volksvertegenwoordiger$id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "/vv",
query = list(lang="nl"),
resultVector=NULL,
use_parallel=use_parallel)
}
# data transformations ----------------------------------------------------
fact <- tolower(fact)
if(fact=="raw"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) -> result
return(result)
}
if(fact=="bio"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
dplyr::select(id_mp=id, voornaam, achternaam=naam, geslacht, geboortedatum, geboorteplaats, domicillieadres, gsmnr, email, website, huidigefractie) %>%
tidyr::unnest_wider(huidigefractie) %>%
dplyr::select(id_mp, voornaam, achternaam, geslacht, geboortedatum, geboorteplaats, domicillieadres, gsmnr, email, website, party_id = id, party_naam = naam) %>%
dplyr::mutate(geboortedatum = lubridate::date(lubridate::ymd_hms(geboortedatum))) %>%
tidyr::unnest_wider(domicillieadres, names_sep="_") %>%
tidyr::unnest_wider(domicillieadres_deelgemeente, names_sep="_") %>%
dplyr::select(id_mp, voornaam, achternaam, geslacht, geboortedatum, geboorteplaats, domicillieadres_deelgemeente=domicillieadres_deelgemeente_naam, domicillieadres_postcode=domicillieadres_deelgemeente_postnr, domicillieadres_nr, domicillieadres_straat, domicillieadres_telnr, gsmnr, email, website, party_id, party_naam) %>%
tidyr::unnest_wider(email, names_sep="_")  %>%
tidyr::unnest(website, names_sep="_",keep_empty =TRUE) %>%
guarantee_field(c("website_soort","website_value")) %>%
tidyr::pivot_wider(names_from = website_soort,values_from = website_value) %>%
dplyr::select(-`NA`) -> result
return(result)
}
if(fact=="education"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
guarantee_field(c("opleiding")) %>%
dplyr::select(id_mp=id,voornaam,naam, opleiding) %>%
tidyr::unnest(opleiding,keep_empty = TRUE) -> result
return(result)
}
if(fact=="career"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
guarantee_field(c("beroep")) %>%
dplyr::select(id_mp=id, voornaam, naam, beroep) %>%
tidyr::unnest(beroep,keep_empty = TRUE) %>%
guarantee_field(c("datumvanformaat","datumtotformaat")) %>%
dplyr::select(-datumtotformaat,-datumvanformaat) %>%
dplyr::select(id_mp,voornaam,naam,datumvan,datumtot,titel,werkgever) -> result
return(result)
}
if(fact=="presences_commissions"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
dplyr::select(id_mp=id,voornaam,naam, aanwezigheden=`aanwezigheden-huidige-legislatuur`) %>%
tidyr::unnest_longer(aanwezigheden) %>%
dplyr::filter(aanwezigheden_id=="commissie-aanw") %>%
tidyr::unnest_wider(aanwezigheden) %>%
tidyr::unnest(c(commissie, `vast-lid-aanwezigheid`, `plaatsvervangend-lid-aanwezigheid`),names_sep="_",keep_empty =TRUE)  -> result
return(result)
}
if(fact=="presences_plenary"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
dplyr::select(id_mp=id,voornaam,naam, aanwezigheden=`aanwezigheden-huidige-legislatuur`) %>%
tidyr::unnest_longer(aanwezigheden) %>%
dplyr::filter(aanwezigheden_id=="plenaire-aanw") %>%
tidyr::unnest_wider(aanwezigheden)  -> result
return(result)
}
if(fact=="political_info"){
mainlist %>%
tibble::tibble(vv = .) %>%
tidyr::unnest_wider(vv) %>%
dplyr::select(id_mp=id
,voornaam,naam
,huidigefractie
,mandaat_vl=`mandaat-vlaams-parlement`
,mandaat_andere=`mandaat-andere`
,kieskring
,deelstaatsenator
,lidmaatschap
,interesse) %>%
tidyr::unnest_wider(lidmaatschap, names_sep = "_") %>%
tidyr::unnest(c(`lidmaatschap_datumVan`, `lidmaatschap_fractie`, `lidmaatschap_datumTot`), names_sep = "_",keep_empty = TRUE) %>%
dplyr::filter(is.na(lidmaatschap_datumTot)) %>%
dplyr::mutate(lidmaatschap_datumVan = lubridate::date(lidmaatschap_datumVan)) %>%
tidyr::unnest_wider(huidigefractie, names_sep = "_") %>%
tidyr::unnest_wider(interesse, names_sep="_") %>%
dplyr::select(-interesse_volgorde, -lidmaatschap_datumTot) %>%
tidyr::unnest_wider(interesse_interesse, names_sep="_") %>%
dplyr::select(-huidigefractie_kleur, -huidigefractie_logo, -lidmaatschap_fractie_id, -lidmaatschap_fractie_kleur, -lidmaatschap_fractie_logo, -lidmaatschap_fractie_naam, -`lidmaatschap_fractie_zetel-aantal`) %>%
dplyr::rename(party_id=huidigefractie_id, party_name=huidigefractie_naam, party_seats=`huidigefractie_zetel-aantal`) -> result
return(result)
}
}
ubridate::ymd(date_range_from) %>% format('%d%m%Y')
lubridate::ymd(date_range_from) %>% format('%d%m%Y')
robj <- call_api_once(URL="http://ws.vlpar.be/e/opendata/",
path="verg/vorige",
query=list(type="plen", dagen=999999,limiet=999999,datumvan="2021-09-01",datumtot="2021-12-31"))
date_range_from="2021-09-01"
date_range_from="2021-09-01"
date_range_to="2021-12-31"
plen_comm="plen"
use_parallel=TRUE
type="details"
extra_via_fact=FALSE
session_object <- get_sessions_details(date_range_from=date_range_from
,date_range_to=date_range_to
,use_parallel=use_parallel
,plen_comm=plen_comm
,type=type
,extra_via_fact=extra_via_fact)
fact=="debates"
View(type_conv)
fact="parliamentary_initiatives"
raw==TRUE
session_object %>%
dplyr::left_join(type_conv,by=c("type_activiteit"="type_nl"))%>%
dplyr::filter(type_eng%in%fact) %>%
dplyr::distinct() %>%
dplyr::left_join(list %>%
tibble::tibble(result = ., id_fact = names(list)) %>%
tidyr::unnest_wider(result,names_sep="_") %>%
tidyr::unnest_longer(result_journaallijn) %>%
tidyr::unnest(result_journaallijn,names_sep = "_") %>%
tidyr::unnest(result_journaallijn_vergadering,names_sep = "_") %>%
tidyr::unnest_wider(result_thema,names_sep="_") %>%
guarantee_field(c("result_contacttype"
,"titel"
,"onderwerp"
,"zittingsjaar"
,"result_journaallijn-stemmingen"
,"result_numac"
,"result_nummer"
,"result_staatsblad")) %>%
dplyr::select(id_fact=result_id
,id_verg=result_journaallijn_vergadering_id
,result_journaallijn_vergadering_datumbegin
,result_journaallijn_vergadering_datumeinde
,dplyr::starts_with("result_thema")
,contacttype=result_contacttype
,titel = result_titel
,onderwerp = result_onderwerp
,zittingsjaar = result_zittingsjaar
,vote= `result_journaallijn-stemmingen`
,extra_details=`result_parlementair-initiatief`
,numac=result_numac
,nr = result_nummer
,staatsblad = result_staatsblad
) %>%
dplyr::distinct() %>%
dplyr::mutate(id_verg=as.character(id_verg)) , by=c("id_fact"="id_fact","id_verg"="id_verg"))%>%
dplyr::distinct() %>%
dplyr::select(id_verg,id_fact,journaallijn_id, dplyr::everything()) -> result
if(fact=="parliamentary_initiatives"){
if(plen_comm=="plen"){
session_object %>%
dplyr::left_join(type_conv,by=c("type_activiteit"="type_nl"))%>%
dplyr::filter(type_eng%in%fact) %>%
dplyr::distinct() %>%
dplyr::left_join(list %>%
tibble::tibble(result = ., id_fact = names(list)) %>%
tidyr::unnest_wider(result,names_sep="_") %>%
tidyr::unnest_longer(result_journaallijn) %>%
tidyr::unnest(result_journaallijn,names_sep = "_") %>%
tidyr::unnest(result_journaallijn_vergadering,names_sep = "_") %>%
tidyr::unnest_wider(result_thema,names_sep="_") %>%
guarantee_field(c("result_contacttype"
,"titel"
,"onderwerp"
,"zittingsjaar"
,"result_journaallijn-stemmingen"
,"result_numac"
,"result_nummer"
,"result_staatsblad")) %>%
dplyr::select(id_fact=result_id
,id_verg=result_journaallijn_vergadering_id
,result_journaallijn_vergadering_datumbegin
,result_journaallijn_vergadering_datumeinde
,dplyr::starts_with("result_thema")
,contacttype=result_contacttype
,titel = result_titel
,onderwerp = result_onderwerp
,zittingsjaar = result_zittingsjaar
,vote= `result_journaallijn-stemmingen`
,extra_details=`result_parlementair-initiatief`
,numac=result_numac
,nr = result_nummer
,staatsblad = result_staatsblad
) %>%
dplyr::distinct() %>%
dplyr::mutate(id_verg=as.character(id_verg)) , by=c("id_fact"="id_fact","id_verg"="id_verg"))%>%
dplyr::distinct() %>%
dplyr::select(id_verg,id_fact,journaallijn_id, dplyr::everything()) -> result
